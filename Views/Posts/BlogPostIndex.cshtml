@using MyBlog.Services
@using MyBlog.Models
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common

@inject IImageService imageService
@model IPagedList<Post>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            @*<th>
                    @Html.DisplayNameFor(model => model.BlogUserId)
                </th>*@
            <th>
                Image
            </th>
            <th>
                Title
            </th>
            <th>
                Abstract
            </th>
            @*<th>
                    @Html.DisplayNameFor(model => model.Content)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.Created)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.Updated)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.ReadyStatus)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.Slug)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.ImageData)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ContentType)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.Blog)
                </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @*<td>
                        @Html.DisplayFor(modelItem => item.BlogUserId)
                    </td>*@
                <td>
                    <img class="img-fluid" width="200px;" src="@imageService.DecodeImage(item.ImageData, item.ContentType)" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Abstract)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.Content)
                    </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Created)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.Updated)
                    </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.ReadyStatus)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.Slug)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.ImageData)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.ContentType)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.Blog.Description)
                    </td>*@
                <td>
                    <a asp-action="Edit" asp-route-slug="@item.Slug">Edit</a> |
                    <a asp-action="Details" asp-route-slug="@item.Slug">Details</a> |
                    <a asp-action="Delete" asp-route-slug="@item.Slug">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<hr />
<div class="row">
    <div class="col h3">
        Page @(Model.PageCount <Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </div>
</div>
<div class="row">
    <div class="col">
        @Html.PagedListPager(Model, page => Url.Action("BlogPostIndex", new {id = Model.FirstOrDefault().BlogId, page = page}), new PagedListRenderOptions()
        {
            LiElementClasses = new string[] {"page-item"},
            PageClasses = new string[] {"page-link"}
        });
    </div>
</div>